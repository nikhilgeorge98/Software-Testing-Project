<?xml version="1.0" encoding="UTF-8"?>
<coverage>
<block classname='us.bpsm.edn.parser.ParserImpl$1' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$1' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$1' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$1' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='unicodeEscapesInStringLiteralsAreAccepted()Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;Lus/bpsm/edn/parser/Parser$Config;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;Lus/bpsm/edn/parser/Parser$Config;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='30'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='42'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;Lus/bpsm/edn/parser/Parser$Config;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;Lus/bpsm/edn/parser/Parser$Config;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='newSymbol(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultTagHandlers()Ljava/util/Map;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser$Config' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='63'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='65'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='64'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespace(Lus/bpsm/edn/parser/Parseable;)V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getTagHandler(Lus/bpsm/edn/Tag;)Lus/bpsm/edn/parser/TagHandler;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getTagHandler(Lus/bpsm/edn/Tag;)Lus/bpsm/edn/parser/TagHandler;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='47'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='46'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='49'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='48'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='45'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='39'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='read()I' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='read()I' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='read()I' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='&lt;init&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParserConfigBuilder()Lus/bpsm/edn/parser/Parser$Config$Builder;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParserConfigBuilder()Lus/bpsm/edn/parser/Parser$Config$Builder;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='&lt;init&gt;(Ljava/lang/CharSequence;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='&lt;init&gt;(Ljava/lang/CharSequence;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='38'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='&lt;init&gt;(Ljava/lang/String;Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='37'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.UuidHandler' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='36'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.UuidHandler' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='31'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='32'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='30'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;)V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='&lt;clinit&gt;()V' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parsers$4;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='build()Lus/bpsm/edn/parser/Parser$Config;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='build()Lus/bpsm/edn/parser/Parser$Config;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='build()Lus/bpsm/edn/parser/Parser$Config;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parsers$4;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;Lus/bpsm/edn/parser/Scanner;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='checkState()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='&lt;init&gt;(Lus/bpsm/edn/parser/Parser$Config;Lus/bpsm/edn/parser/Scanner;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='checkState()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='newSymbol(Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='newSymbol(Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='unread(Lus/bpsm/edn/parser/Parseable;I)Lus/bpsm/edn/parser/Parseable;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='unread(Lus/bpsm/edn/parser/Parseable;I)Lus/bpsm/edn/parser/Parseable;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='&lt;init&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParseable(Ljava/lang/CharSequence;)Lus/bpsm/edn/parser/Parseable;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParseable(Ljava/lang/CharSequence;)Lus/bpsm/edn/parser/Parseable;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='separatesTokens(C)Z' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='separatesTokens(C)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='isDigit(C)Z' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='isDigit(C)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkArguments(Ljava/lang/String;Ljava/lang/String;)V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantToDate' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantToDate' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='hashCode()I' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Lus/bpsm/edn/Symbol;)Lus/bpsm/edn/Tag;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Lus/bpsm/edn/Symbol;)Lus/bpsm/edn/Tag;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='characters()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='hashCode()I' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParser(Lus/bpsm/edn/parser/Parser$Config;)Lus/bpsm/edn/parser/Parser;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParser(Lus/bpsm/edn/parser/Parser$Config;)Lus/bpsm/edn/parser/Parser;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='hashCode()I' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='isWhitespace(C)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='newParser(Lus/bpsm/edn/parser/Parser$Config;)Lus/bpsm/edn/parser/Parser;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='isWhitespace(C)Z' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='hashCode()I' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$2' method='unread(I)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='defaultConfiguration()Lus/bpsm/edn/parser/Parser$Config;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='newSymbol(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='newSymbol(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='symbolStart(C)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='nextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='nextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='symbolStart(C)Z' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers' method='&lt;clinit&gt;()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='symbolConstituent(C)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.util.CharClassify' method='symbolConstituent(C)Z' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Named' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Named' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='newTag(Ljava/lang/String;)Lus/bpsm/edn/Tag;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.characters(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parser' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='33'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='commaIsWhitespace()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='parseall(Ljava/lang/String;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='34'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='37'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;init&gt;(Ljava/lang/String;I)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='&lt;init&gt;(Ljava/lang/String;I)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='values()[Lus/bpsm/edn/parser/Token;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Token' method='values()[Lus/bpsm/edn/parser/Token;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.commaIsWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='72'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='71'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='68'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='67'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='70'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='69'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='56'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='55'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='57'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='52'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='51'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='54'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='48'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='47'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='50'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='49'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='46'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='36'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='35'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='38'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='37'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='32'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='31'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='30'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='decimalFloats()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.decimalFloats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='build()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultListFactory;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseIntoCollection(Lus/bpsm/edn/parser/CollectionBuilder$Factory;Lus/bpsm/edn/parser/Token;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultListFactory;)V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultListFactory;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='&lt;init&gt;(Ljava/util/List;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultVectorFactory;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='&lt;init&gt;(Ljava/util/List;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultVectorFactory;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultVectorFactory;)V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='get(I)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='get(I)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='size()I' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DelegatingList' method='size()I' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='build()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultListFactory$1' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='107'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='31'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='104'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='30'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='106'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='105'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='100'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='99'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultVectorFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getVectorFactory()Lus/bpsm/edn/parser/CollectionBuilder$Factory;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='101'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='96'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='95'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='98'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='97'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='94'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='84'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='delimetersNeedNoWhitespace()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='86'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='delimetersNeedNoWhitespace()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getListFactory()Lus/bpsm/edn/parser/CollectionBuilder$Factory;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='85'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='delimetersNeedNoWhitespace()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='80'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='delimetersNeedNoWhitespace()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='81'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='78'><tests>
<test name='us.bpsm.edn.EdnFormatTest.delimetersNeedNoWhitespace(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='74'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='73'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='53'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='floats()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='76'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='75'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='77'><tests>
<test name='us.bpsm.edn.EdnFormatTest.floats(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='31'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='30'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='24'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='36'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='33'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='32'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='35'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='integers()V' number='34'><tests>
<test name='us.bpsm.edn.EdnFormatTest.integers(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnException' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnException' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywordJustSlashIsIllegal()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbol(ILus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Symbol;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnSyntaxException' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnSyntaxException' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywordJustSlashIsIllegal(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='31'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='33'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='25'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='32'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='29'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Lus/bpsm/edn/Symbol;)Lus/bpsm/edn/Keyword;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Lus/bpsm/edn/Symbol;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Lus/bpsm/edn/Symbol;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='35'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='34'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='clearDeadEntries()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='clearDeadEntries()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='clearDeadEntries()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='equals(Ljava/lang/Object;)Z' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readKeyword(Lus/bpsm/edn/parser/Parseable;)Lus/bpsm/edn/Keyword;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='keywords()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='newKeyword(Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='&lt;init&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='&lt;init&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose(Ljava/lang/String;)C' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose(Ljava/lang/String;)C' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose(Ljava/lang/String;)C' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose(Ljava/lang/String;)C' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='generateRandomSymbolName([I)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose([I)I' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='choose([I)I' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Interner' method='intern(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.keywords(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='lists()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.lists(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='19'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='18'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='13'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='namespacedSymbols()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.namespacedSymbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='32'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNil(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNil(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNil(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNil(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNil(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='nilReadsAsNull()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='nilReadsAsNull()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='nilReadsAsNull()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.nilReadsAsNull(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='45'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='42'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='44'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='43'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='38'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='37'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='39'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='36'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='28'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsAllowUnicodeEscapesOptionally()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsAllowUnicodeEscapesOptionally()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsAllowUnicodeEscapesOptionally()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='35'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='34'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsAllowUnicodeEscapesOptionally(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsCanBeMultiline()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsCanBeMultiline()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsCanBeMultiline()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='53'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='52'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsCanBeMultiline(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='26'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='27'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='22'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='21'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='23'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='17'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='20'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='16'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsSupportJavaStyleEscapes()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsSupportJavaStyleEscapes()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='stringsSupportJavaStyleEscapes()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.stringsSupportJavaStyleEscapes(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='symbols()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.symbols(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrTrue(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readSymbolOrFalse(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='trueAndFalseReadAsBoolean()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.EdnFormatTest.trueAndFalseReadAsBoolean(us.bpsm.edn.EdnFormatTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='4'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='3'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='2'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='1'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='0'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='12'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='11'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='10'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='9'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='8'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='7'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='6'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.EdnFormatTest' method='vectors()V' number='5'><tests>
<test name='us.bpsm.edn.EdnFormatTest.vectors(us.bpsm.edn.EdnFormatTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='7'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='6'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testKeywordIdentity()V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='writeReplace()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='writeReplace()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='deserialize([B)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='deserialize([B)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='deserialize([B)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='deserialize([B)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='serialize(Ljava/lang/Object;)[B' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword$SerializationProxy' method='readResolve()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword$SerializationProxy' method='readResolve()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword$SerializationProxy' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword$SerializationProxy' method='&lt;init&gt;(Lus/bpsm/edn/Symbol;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testKeywordIdentity(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='59'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='58'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getSetFactory()Lus/bpsm/edn/parser/CollectionBuilder$Factory;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultSetFactory;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultSetFactory;)V' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultSetFactory;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='7'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='6'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.SerializabilityTest' method='testSerializability()V' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='13'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='12'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='14'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromInputStream(Ljava/io/InputStream;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='12'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='11'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromURL(Ljava/net/URL;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromURL(Ljava/net/URL;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromURL(Ljava/net/URL;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromURL(Ljava/net/URL;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='33'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='32'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='27'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='scanNextToken(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='26'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='newTaggedValue(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Lus/bpsm/edn/TaggedValue;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='newTaggedValue(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Lus/bpsm/edn/TaggedValue;' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='newTaggedValue(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Lus/bpsm/edn/TaggedValue;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4$1' method='getMapFactory()Lus/bpsm/edn/parser/CollectionBuilder$Factory;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='build()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='17'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='15'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='14'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='11'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='41'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='40'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromResource(Ljava/lang/String;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='11'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromResource(Ljava/lang/String;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromResource(Ljava/lang/String;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='13'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='12'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='16'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromResource(Ljava/lang/String;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.IOUtil' method='stringFromResource(Ljava/lang/String;)Ljava/lang/String;' number='10'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultMapFactory;)V' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultMapFactory;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultMapFactory;)V' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/DefaultMapFactory;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='9'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='11'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='10'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='build()Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='build()Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='2'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='&lt;init&gt;(Lus/bpsm/edn/Tag;Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='&lt;init&gt;(Lus/bpsm/edn/Tag;Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='103'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='102'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='83'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='79'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='82'><tests>
<test name='us.bpsm.edn.SerializabilityTest.testSerializability(us.bpsm.edn.SerializabilityTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomLongHandler;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomLongHandler;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomLongHandler' method='test()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='putTagHandler(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/TagHandler;)Lus/bpsm/edn/parser/Parser$Config$Builder;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='putTagHandler(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/TagHandler;)Lus/bpsm/edn/parser/Parser$Config$Builder;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='putTagHandler(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/TagHandler;)Lus/bpsm/edn/parser/Parser$Config$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomLongHandler.test(us.bpsm.edn.examples.CustomLongHandler)'/>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler' method='test()V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomTagHandler;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagHandler$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomTagHandler;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagHandler.test(us.bpsm.edn.examples.CustomTagHandler)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='toString()Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='toString()Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='toString()Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='toString()Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeListFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='softspace()Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeListFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTagFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTagFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeSetFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeSetFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='eval(Lus/bpsm/edn/Tag;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='eval(Lus/bpsm/edn/Tag;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='eval(Lus/bpsm/edn/Tag;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='eval(Lus/bpsm/edn/Tag;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='eval(Lus/bpsm/edn/Tag;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBigDecimalFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBigDecimalFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$20' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='eval(Ljava/net/URI;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='eval(Ljava/net/URI;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='eval(Ljava/net/URI;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='eval(Ljava/net/URI;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='eval(Ljava/net/URI;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTimestampFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTimestampFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTaggedValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeTaggedValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeDoubleValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeNullFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeDoubleValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeNullFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Tag' method='toString()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeMapFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeMapFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeSymbolFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeSymbolFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCharacterFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCalendarFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCharacterFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCalendarFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='13'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='builder(Ljava/lang/String;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='put(Ljava/lang/Class;Ljava/lang/Object;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='builder(Ljava/lang/String;)Lus/bpsm/edn/protocols/Protocol$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='27'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='26'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='29'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='28'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBooleanFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='31'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBooleanFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='30'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='allAreEmpty(Ljava/util/List;)Z' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$19' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='&lt;init&gt;(Ljava/lang/Appendable;Lus/bpsm/edn/protocols/Protocol;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='&lt;init&gt;(Ljava/lang/Appendable;Lus/bpsm/edn/protocols/Protocol;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$19' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBigIntegerFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeBigIntegerFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='25'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='&lt;init&gt;(Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='&lt;init&gt;(Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='&lt;init&gt;(Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='&lt;init&gt;(Ljava/lang/String;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomTagPrinter;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/CustomTagPrinter;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeLongValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeLongValueFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='14'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='13'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='butfirst(Ljava/util/List;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='butfirst(Ljava/util/List;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='butfirst(Ljava/util/List;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='butfirst(Ljava/util/List;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols' method='butfirst(Ljava/util/List;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='close()V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='close()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='close()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='14'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='13'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='16'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='15'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='18'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='17'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='20'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='19'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='22'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='close()V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='21'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='24'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='23'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='26'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='25'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='28'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='27'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='30'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='29'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='32'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$18' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='31'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$18' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='34'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='33'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='13'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='36'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeUuidFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='35'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='38'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='37'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeUuidFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='40'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='39'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='42'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='41'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='44'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='build()Lus/bpsm/edn/protocols/Protocol;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='43'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='46'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='45'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='47'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='build()Lus/bpsm/edn/protocols/Protocol;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='printValue(Ljava/lang/Object;)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='12'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='printValue(Ljava/lang/Object;)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='printValue(Ljava/lang/Object;)Lus/bpsm/edn/printer/Printer;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='printValue(Ljava/lang/Object;)Lus/bpsm/edn/printer/Printer;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='printValue(Ljava/lang/Object;)Lus/bpsm/edn/printer/Printer;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='removeCandidate(Ljava/util/List;Ljava/lang/Class;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeKeywordFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeKeywordFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeDateFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeDateFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='getClassOrNull(Ljava/lang/Object;)Ljava/lang/Class;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='getClassOrNull(Ljava/lang/Object;)Ljava/lang/Class;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='getClassOrNull(Ljava/lang/Object;)Ljava/lang/Class;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCharSequenceFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='writeCharSequenceFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='asList(Ljava/lang/Class;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='asList(Ljava/lang/Class;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='asList(Ljava/lang/Class;)Ljava/util/List;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='4'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='5'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='2'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='3'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='8'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='9'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='6'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='7'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='10'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.CustomTagPrinter' method='test()V' number='11'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='newPrinter(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='newPrinter(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.examples.CustomTagPrinter.test(us.bpsm.edn.examples.CustomTagPrinter)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='0'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='1'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='2'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='3'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='4'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='5'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='6'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='7'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='8'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='9'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='10'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='11'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='12'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='13'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='simpleUsageExample()V' number='14'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.ParseASingleMapTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.ParseASingleMapTest.simpleUsageExample(us.bpsm.edn.examples.ParseASingleMapTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='eval(Lus/bpsm/edn/Keyword;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='eval(Lus/bpsm/edn/Keyword;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='eval(Lus/bpsm/edn/Keyword;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='eval(Lus/bpsm/edn/Keyword;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$6' method='eval(Lus/bpsm/edn/Keyword;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='defaultPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$14' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='supers(Ljava/lang/Class;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$12' method='eval(Ljava/lang/Number;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='13'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$5' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='10'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(Ljava/lang/CharSequence;)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='toString()Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='toString()Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='toString()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='toString()Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='toString()Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='eval(Lus/bpsm/edn/Symbol;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='eval(Lus/bpsm/edn/Symbol;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='eval(Lus/bpsm/edn/Symbol;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='eval(Lus/bpsm/edn/Symbol;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$7' method='eval(Lus/bpsm/edn/Symbol;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='occursInSomeTail(Ljava/util/List;Ljava/lang/Object;)Z' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='14'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='15'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='10'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='toString()Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printCompactly()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printCompactly()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printCompactly()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printCompactly()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printCompactly()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Object;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Object;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Object;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Object;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Lus/bpsm/edn/protocols/Protocol;Ljava/lang/Object;)Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printCompactly(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='14'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='13'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='15'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='10'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='run()V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$21;Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$21;Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printIndent(Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printIndent(Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printIndent(Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printIndent(Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyProtocolBuilder()Lus/bpsm/edn/protocols/Protocol$Builder;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$21$1;Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$21$1;Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$23;Lus/bpsm/edn/printer/Printer;Ljava/util/Map;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$23;Lus/bpsm/edn/printer/Printer;Ljava/util/Map;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteMapFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteMapFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteSetFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteSetFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printPretty()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printPretty()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printPretty()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printPretty()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.PrintingExamples' method='printPretty()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteListFn()Lus/bpsm/edn/printer/Printer$Fn;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyWriteListFn()Lus/bpsm/edn/printer/Printer$Fn;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='prettyPrinterProtocol()Lus/bpsm/edn/protocols/Protocol;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='10'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='13'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='14'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='23'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='15'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='21'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='runIndented(Ljava/lang/Runnable;)V' number='20'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='14'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='13'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$23$1;Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$23$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$23$1;Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='withPretty(Ljava/lang/Runnable;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='11'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1' method='run()V' number='12'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='8'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='7'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$1' method='append(C)Lus/bpsm/edn/printer/Printer;' number='4'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21$1$1' method='run()V' number='9'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$21' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$PrettyPrintContext' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$PrettyPrintContext' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$PrettyPrintContext' method='&lt;init&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$PrettyPrintContext' method='&lt;init&gt;()V' number='3'><tests>
<test name='us.bpsm.edn.examples.PrintingExamples.printPretty(us.bpsm.edn.examples.PrintingExamples)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/SimpleParserConfigTest$1;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/SimpleParserConfigTest$1;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/SimpleParserConfigTest$1;)V' number='2'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='3'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='2'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='5'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='4'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='11'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='10'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='13'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='12'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='7'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='6'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='9'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='8'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='19'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='18'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='20'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='15'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='14'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='17'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest' method='test()V' number='16'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='setSetFactory(Lus/bpsm/edn/parser/CollectionBuilder$Factory;)Lus/bpsm/edn/parser/Parser$Config$Builder;' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.Parsers$4' method='setSetFactory(Lus/bpsm/edn/parser/CollectionBuilder$Factory;)Lus/bpsm/edn/parser/Parser$Config$Builder;' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1$1' method='add(Ljava/lang/Object;)V' number='8'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/SimpleParserConfigTest;)V' number='1'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.examples.SimpleParserConfigTest$1' method='&lt;init&gt;(Lus/bpsm/edn/examples/SimpleParserConfigTest;)V' number='0'><tests>
<test name='us.bpsm.edn.examples.SimpleParserConfigTest.test(us.bpsm.edn.examples.SimpleParserConfigTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='isLeapYear(I)Z' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='69'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='75'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='74'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='80'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='isLeapYear(I)Z' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='81'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='87'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseIntOrElse(Ljava/lang/String;I)I' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='86'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseIntOrElse(Ljava/lang/String;I)I' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseIntOrElse(Ljava/lang/String;I)I' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseIntOrElse(Ljava/lang/String;I)I' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='38'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='37'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='44'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='43'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='14'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar(Ljava/lang/String;Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar(Ljava/lang/String;Ljava/lang/String;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='50'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='49'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='56'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='55'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar(Ljava/lang/String;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar(Ljava/lang/String;Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='59'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='58'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='64'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='&lt;init&gt;(IIIIIIIIII)V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='calendarToString(Ljava/util/GregorianCalendar;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='&lt;init&gt;(IIIIIIIIII)V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='16'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='15'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='14'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='20'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='19'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='18'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='17'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='24'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='23'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='22'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='21'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='28'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='27'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='26'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='25'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='30'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='29'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='36'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='35'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='daysInMonth(IZ)I' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='daysInMonth(IZ)I' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='daysInMonth(IZ)I' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseOffsetSign(Ljava/lang/String;)I' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testCalendar()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeCalendar(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/GregorianCalendar;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testCalendar(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parseNanoseconds(Ljava/lang/String;)I' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate(Ljava/lang/String;Ljava/lang/String;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate(Ljava/lang/String;Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='getTimeZone(III)Ljava/util/TimeZone;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='14'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate(Ljava/lang/String;Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testDate(Ljava/lang/String;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeDate(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/Date;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='dateToString(Ljava/util/Date;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeDate(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/Date;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeDate(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/util/Date;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testDate(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='isLeapYear(I)Z' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='isLeapYear(I)Z' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='76'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='79'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='78'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='77'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='84'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='isLeapYear(I)Z' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='83'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='82'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='85'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='40'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='39'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='42'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='41'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='48'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='47'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='46'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='45'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='52'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='51'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='54'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='53'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='60'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='57'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='63'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='62'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='61'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='32'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='31'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='34'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='33'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='15'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='16'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='17'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='parse(Ljava/lang/String;)Lus/bpsm/edn/parser/ParsedInstant;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testExtragrammaticalVerificationAfterParse()V' number='18'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='daysInMonth(IZ)I' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testExtragrammaticalVerificationAfterParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='pi(IIIIIIIIII)Lus/bpsm/edn/parser/ParsedInstant;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='pi(IIIIIIIIII)Lus/bpsm/edn/parser/ParsedInstant;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='14'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='16'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='18'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='20'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='22'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='24'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='26'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParsedInstant' method='equals(Ljava/lang/Object;)Z' number='28'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='27'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='26'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='23'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='22'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='25'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='24'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='19'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='18'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='21'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='20'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='15'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='14'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='17'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='16'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='11'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='13'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='12'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParse()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParse(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='10'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testParseNanoseconds()V' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testParseNanoseconds(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp()V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp()V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp()V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp()V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp()V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='6'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='5'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='timestampToString(Ljava/sql/Timestamp;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeTimestamp(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/sql/Timestamp;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeTimestamp(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/sql/Timestamp;' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeTimestamp(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/sql/Timestamp;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeTimestamp(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/sql/Timestamp;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils' method='makeTimestamp(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/sql/Timestamp;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp(Ljava/lang/String;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp(Ljava/lang/String;Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp(Ljava/lang/String;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp(Ljava/lang/String;Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtilsTest' method='testTimestamp(Ljava/lang/String;Ljava/lang/String;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='initialValue()Ljava/text/SimpleDateFormat;' number='3'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='initialValue()Ljava/text/SimpleDateFormat;' number='2'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='initialValue()Ljava/text/SimpleDateFormat;' number='1'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantUtils$1' method='initialValue()Ljava/text/SimpleDateFormat;' number='0'><tests>
<test name='us.bpsm.edn.parser.InstantUtilsTest.testTimestamp(us.bpsm.edn.parser.InstantUtilsTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$3' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$3' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$3' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfFloats()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$3' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$3' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$4' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Lus/bpsm/edn/parser/Parser$Config;Ljava/lang/String;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$4' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Lus/bpsm/edn/parser/Parser$Config;Ljava/lang/String;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Lus/bpsm/edn/parser/Parser$Config;Ljava/lang/String;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Lus/bpsm/edn/parser/Parser$Config;Ljava/lang/String;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$4' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$4' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfFloats(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$2' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$2' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$2' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$1' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$1' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$2' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest$2' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserTest;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='canCustomizeParsingOfInteger()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.canCustomizeParsingOfInteger(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='31'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='30'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='29'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='discardedTaggedValuesDoNotCallTransformer()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='discardedTaggedValuesDoNotCallTransformer()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='discardedTaggedValuesDoNotCallTransformer()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='discardedTaggedValuesDoNotCallTransformer()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parse(Ljava/lang/String;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/Tag;Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.discardedTaggedValuesDoNotCallTransformer(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersAutoPromoteToBigIfTooBig()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersAutoPromoteToBigIfTooBig(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='integersParseAsLongByDefault()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.integersParseAsLongByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.UuidHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.UuidHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='invalidUUIDCausesException()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.invalidUUIDCausesException(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='issue32()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.issue32(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='key(Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='key(Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='map([Ljava/lang/Object;)Ljava/util/Map;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sym(Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sym(Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipWhitespaceAndComments(Lus/bpsm/edn/parser/Parseable;)V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='22'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='23'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='20'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='21'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='18'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='19'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='16'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='17'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='14'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='15'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='skipComment(Lus/bpsm/edn/parser/Parseable;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='34'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='35'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='32'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='33'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='30'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='31'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='28'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='29'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='26'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='27'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='24'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseEdnSample()V' number='25'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseEdnSample(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedInstant()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedInstant()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedInstant()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedInstant()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.AbstractInstantHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantToDate' method='transform(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.InstantToDate' method='transform(Lus/bpsm/edn/parser/ParsedInstant;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedInstant(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedUUID()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedUUID()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedUUID()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedUUID()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.UuidHandler' method='transform(Lus/bpsm/edn/Tag;Ljava/lang/Object;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedUUID(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parseTaggedValueWithUnkownTag()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parseTaggedValueWithUnkownTag(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldDetectDuplicateMapKeys()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultMapFactory$1' method='add(Ljava/lang/Object;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeys(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl;Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl;Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;clinit&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;clinit&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;clinit&gt;()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;clinit&gt;()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='19'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='18'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='17'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='27'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='26'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='getPrefix()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory' method='builder()Lus/bpsm/edn/parser/CollectionBuilder;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='add(Ljava/lang/Object;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldDetectDuplicateMapKeysInNamespacedMaps()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readHashDispatched(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='13'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='16'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='12'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='11'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='21'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='20'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='getPrefix()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='getPrefix()Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='16'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='15'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='parseNamespaceName(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/String;' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='&lt;init&gt;(Lus/bpsm/edn/parser/ParserImpl$NamespacedMapFactory;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='getName()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='getName()Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Keyword' method='getName()Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateMapKeysInNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.DefaultSetFactory$1' method='add(Ljava/lang/Object;)V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldDetectDuplicateSetElements()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldDetectDuplicateSetElements(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldNotBeConfusedByUnderscoreInNonNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableListByDefault()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableListByDefault()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableListByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableMapByDefault()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableMapByDefault()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableMapByDefault()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableMapByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableSetByDefault()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableSetByDefault()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableSetByDefault()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableSetByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableVectorByDefault()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserShouldReturnUnmodifiableVectorByDefault()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserShouldReturnUnmodifiableVectorByDefault(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl' method='nextValue(Lus/bpsm/edn/parser/Parseable;Z)Ljava/lang/Object;' number='28'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='build()Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='build()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserUnderstandsNamespacedMaps()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserUnderstandsNamespacedMaps()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserUnderstandsNamespacedMaps()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserTest' method='parserUnderstandsNamespacedMaps()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='14'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='15'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ParserImpl$NamespacedMapFactory$NamespacedMapBuilder' method='maybeApplyDefaultNamespace(Ljava/lang/Object;)Ljava/lang/Object;' number='10'><tests>
<test name='us.bpsm.edn.parser.ParserTest.parserUnderstandsNamespacedMaps(us.bpsm.edn.parser.ParserTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginList()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginList()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scan(Ljava/lang/String;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scan(Ljava/lang/String;)Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scan(Ljava/lang/String;)Ljava/lang/Object;' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scan(Ljava/lang/String;)Ljava/lang/Object;' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scanner()Lus/bpsm/edn/parser/Scanner;' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scanner()Lus/bpsm/edn/parser/Scanner;' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginList()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='scanner()Lus/bpsm/edn/parser/Scanner;' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginMap()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginMap()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginMap()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginMap(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginSet()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginSet()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginSet()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginVector()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginVector()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='beginVector()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.beginVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerAutopromote()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerAutopromote(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerRequested()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerRequested()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerRequested()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='bigIntegerRequested()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.bigIntegerRequested(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='colonSlashIsNotAValidKeyword()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.colonSlashIsNotAValidKeyword(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readCharacterLiteral(Lus/bpsm/edn/parser/Parseable;)C' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='commaCharacter()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='commaCharacter()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='commaCharacter()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='commaCharacter()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.commaCharacter(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='comment()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='comment()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='comment()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.comment(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithExponent()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithExponent()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithExponent()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithExponent()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFraction()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFraction()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFraction()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFraction()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFractionAndExponent()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFractionAndExponent()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFractionAndExponent()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='decimalWithFractionAndExponent()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.decimalWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='discard()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='discard()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='discard()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.discard(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='doubleSlashIfPresentMustEndSymbol1()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='29'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='28'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='25'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='24'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='33'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='32'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol1(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='doubleSlashIfPresentMustEndSymbol2()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol2(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='doubleSlashIfPresentMustEndSymbol3()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='27'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='26'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.doubleSlashIfPresentMustEndSymbol3(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='emptyString()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='emptyString()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='emptyString()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.emptyString(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endList()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endList()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endList()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endList(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endMapOrSet()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endMapOrSet()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endMapOrSet()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endMapOrSet(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endVector()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endVector()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='endVector()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.endVector(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithExponent()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithExponent()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithExponent()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithExponent()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFraction()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFraction()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFraction()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFraction()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFraction(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='floatWithFractionAndExponent()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.floatWithFractionAndExponent(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDifferentPrefixNotIdentical()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDifferentPrefixNotIdentical(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='27'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='26'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='28'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='23'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='22'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='25'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='24'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='21'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithDoubleColonPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithDoubleColonPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithPrefix()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithPrefix()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithPrefix()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='key(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='key(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Keyword;' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithoutPrefix()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithoutPrefix()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithoutPrefix()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordWithoutPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGlobally()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGlobally()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGlobally()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGlobally()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGlobally(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGloballyWithoutPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGloballyWithoutPrefix()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGloballyWithoutPrefix()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='keywordsAreInternedGloballyWithoutPrefix()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.keywordsAreInternedGloballyWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnFloat()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnFloat(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnInteger()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnInteger()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnInteger()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='leadingZeroOnInteger()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.leadingZeroOnInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxInteger()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxLong()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxLong()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxLong()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='maxLong()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.maxLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minInteger()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minInteger()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minInteger()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minInteger()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minInteger(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minLong()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minLong()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minLong()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='minLong()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.minLong(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='21'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='20'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='23'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='22'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='19'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='charForName(Ljava/lang/String;)C' number='24'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='18'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='17'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='16'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='15'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='14'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namedCharacters()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namedCharacters(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sym(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sym(Ljava/lang/String;Ljava/lang/String;)Lus/bpsm/edn/Symbol;' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namespacedSlashIsAValidSymbol()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namespacedSlashIsAValidSymbol()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namespacedSlashIsAValidSymbol()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='namespacedSlashIsAValidSymbol()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='20'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='31'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='29'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='makeSymbol(Ljava/lang/StringBuilder;II)Lus/bpsm/edn/Symbol;' number='30'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='31'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='30'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.namespacedSlashIsAValidSymbol(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='41'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='40'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='nonDigitInUnicodeEscapeInStringLiteral()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='nonDigitInUnicodeEscapeInStringLiteral()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='nonDigitInUnicodeEscapeInStringLiteral()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.nonDigitInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='19'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='15'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='16'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='17'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='18'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='14'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='sequenceOfTokens()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.sequenceOfTokens(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='25'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='24'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='18'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='19'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='13'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readStringLiteral(Lus/bpsm/edn/parser/Parseable;)Ljava/lang/String;' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringEscapes()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringEscapes()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringEscapes()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringEscapes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringWithLinebreak()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringWithLinebreak()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='simpleStringWithLinebreak()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.simpleStringWithLinebreak(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolEndsInSlash()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='11'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='13'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='15'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='14'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolEndsInSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolHasTooManySlashes()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolHasTooManySlashes(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolSlash()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolSlash()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolSlash()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolSlash()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolStartsWithDashDigit()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='92'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='91'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='93'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='88'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='87'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='90'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='readNumber(ILus/bpsm/edn/parser/Parseable;)Ljava/lang/Object;' number='89'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDashDigit(us.bpsm.edn.parser.ScannerTest)'/>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolStartsWithDotDigit()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='43'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='42'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='44'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='39'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='38'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='41'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='40'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='37'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.Symbol' method='checkName(Ljava/lang/String;Ljava/lang/String;)V' number='36'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithDotDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolStartsWithPlusDigit()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithPlusDigit(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolStartsWithSlash()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='22'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='19'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='18'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='21'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='20'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerImpl' method='validateUseOfSlash(Ljava/lang/CharSequence;II)V' number='17'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolStartsWithSlash(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithEmbeddedHashOrColon()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithEmbeddedHashOrColon(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithPrefix()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithPrefix()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithPrefix()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithoutPrefix()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithoutPrefix()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithoutPrefix()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolWithoutPrefix()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolWithoutPrefix(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='13'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='12'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='15'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='14'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='11'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='25'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='24'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='26'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='21'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='20'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='23'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='22'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='17'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='16'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='19'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='symbolsWithPunctuation()V' number='18'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.symbolsWithPunctuation(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testEmpty()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testEmpty()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testEmpty()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testEmpty(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testFalse()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testFalse()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testFalse()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testFalse()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testFalse(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testNil()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testNil()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testNil()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testNil(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testTrue()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testTrue()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testTrue()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='testTrue()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.testTrue(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedInputInUnicodeEscapeInStringLiteral()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedInputInUnicodeEscapeInStringLiteral()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedInputInUnicodeEscapeInStringLiteral()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedInputInUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedUnicodeEscapeInStringLiteral()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedUnicodeEscapeInStringLiteral()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='truncatedUnicodeEscapeInStringLiteral()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.truncatedUnicodeEscapeInStringLiteral(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='10'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='7'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='9'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='8'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapeCharacterLiterals()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapeCharacterLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='5'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='4'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='6'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='unicodeEscapesInStringLiterals()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.unicodeEscapesInStringLiterals(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='zero()V' number='0'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='zero()V' number='3'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='zero()V' number='2'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.parser.ScannerTest' method='zero()V' number='1'><tests>
<test name='us.bpsm.edn.parser.ScannerTest.zero(us.bpsm.edn.parser.ScannerTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='newPrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='newPrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='newPrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Ljava/lang/Object;)Ljava/lang/String;' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Ljava/lang/Object;)Ljava/lang/String;' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='printString(Ljava/lang/Object;)Ljava/lang/String;' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='issue31()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.issue31(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='22'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='21'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='24'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='23'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='18'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='17'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='20'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='19'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='14'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='16'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='assertRoundTrip(Ljava/lang/String;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$9' method='eval(Ljava/lang/Boolean;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='eval(Ljava/util/UUID;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='eval(Ljava/util/UUID;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='eval(Ljava/util/UUID;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$16' method='eval(Ljava/util/UUID;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$15' method='eval(Ljava/math/BigDecimal;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='eval(Ljava/util/Date;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='eval(Ljava/util/Date;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='eval(Ljava/util/Date;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$17' method='eval(Ljava/util/Date;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers' method='getClassOrNull(Ljava/lang/Object;)Ljava/lang/Class;' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$13' method='eval(Ljava/math/BigInteger;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$4' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.Protocols$ProtocolImpl' method='lookup(Ljava/lang/Class;)Ljava/lang/Object;' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='eval(Ljava/lang/Void;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='eval(Ljava/lang/Void;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='eval(Ljava/lang/Void;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$2' method='eval(Ljava/lang/Void;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testComplexValue()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testComplexValue()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='14'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='29'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='28'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='16'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testComplexValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testDefaultPrinter()V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testDefaultPrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='14'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='14'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='16'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter' method='newLoosePrinter(Ljava/lang/Appendable;)Lus/bpsm/edn/printer/Printer;' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testLoosePrinter()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='eval(Ljava/util/List;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$2' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$2' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$3' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printer$Fn;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$1' method='eval(Ljava/util/Map;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.LoosePrinter$4' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testLoosePrinter(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$22;Lus/bpsm/edn/printer/Printer;Ljava/util/Set;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$22;Lus/bpsm/edn/printer/Printer;Ljava/util/Set;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testPrettyPrinting()V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1' method='run()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$22$1;Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='&lt;init&gt;(Lus/bpsm/edn/printer/Printers$22$1;Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22' method='eval(Ljava/util/Set;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$22$1$1' method='run()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testPrettyPrinting(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testRoundTripCommaCharacterLiteralIssue45()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testRoundTripCommaCharacterLiteralIssue45()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='20'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='19'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testRoundTripCommaCharacterLiteralIssue45(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='19'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='18'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='21'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='20'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='23'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='22'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='24'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='17'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$10' method='eval(Ljava/lang/CharSequence;Lus/bpsm/edn/printer/Printer;)V' number='16'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='7'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='6'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='5'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='19'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='18'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='17'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='16'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='22'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='21'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='20'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='11'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='10'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='9'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='8'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='15'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='14'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='13'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSingleValues()V' number='12'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='18'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$11' method='eval(Ljava/lang/Character;Lus/bpsm/edn/printer/Printer;)V' number='17'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSingleValues(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSymbolAsMapKeyWithSetAsValue()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testSymbolAsMapKeyWithSetAsValue()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testSymbolAsMapKeyWithSetAsValue(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='getValue()Ljava/lang/Object;' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='eval(Lus/bpsm/edn/TaggedValue;Lus/bpsm/edn/printer/Printer;)V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='eval(Lus/bpsm/edn/TaggedValue;Lus/bpsm/edn/printer/Printer;)V' number='2'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='eval(Lus/bpsm/edn/TaggedValue;Lus/bpsm/edn/printer/Printer;)V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='eval(Lus/bpsm/edn/TaggedValue;Lus/bpsm/edn/printer/Printer;)V' number='3'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.Printers$8' method='eval(Lus/bpsm/edn/TaggedValue;Lus/bpsm/edn/printer/Printer;)V' number='4'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.TaggedValue' method='getTag()Lus/bpsm/edn/Tag;' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testTaggedSymbol()V' number='0'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.printer.PrinterTest' method='testTaggedSymbol()V' number='1'><tests>
<test name='us.bpsm.edn.printer.PrinterTest.testTaggedSymbol(us.bpsm.edn.printer.PrinterTest)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='objectIsFinalInOrder()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='objectIsFinalInOrder()V' number='2'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='objectIsFinalInOrder()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='objectIsFinalInOrder()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.objectIsFinalInOrder(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testArrayList()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testArrayList()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testArrayList()V' number='2'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testArrayList()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testArrayList(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample1()V' number='2'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample1()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample1()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample1()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample1(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample2()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample2()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample2()V' number='2'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample2()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample2(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='4'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='5'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='2'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='12'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='13'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='10'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='11'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='8'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='9'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='6'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='7'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='20'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='21'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='18'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='19'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='16'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='17'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='14'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='15'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='26'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='27'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='24'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='25'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='22'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample3()V' number='23'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample3(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='16'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='mro(Ljava/lang/Class;)Ljava/util/List;' number='15'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='8'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='9'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='10'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='11'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='10'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='13'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='12'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='7'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='3'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='6'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='4'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='9'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3Test' method='testMroExample4OrderDisagreement()V' number='5'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='8'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='19'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='18'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='21'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='20'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='15'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='14'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='findCandidate(Ljava/util/List;)Ljava/lang/Class;' number='12'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='17'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='16'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='methodResolutionOrder(Ljava/lang/Class;)Ljava/util/List;' number='22'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3$InconsistentHierarchy' method='&lt;init&gt;(Ljava/lang/Class;)V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3$InconsistentHierarchy' method='&lt;init&gt;(Ljava/lang/Class;)V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3$InconsistentHierarchy' method='&lt;init&gt;()V' number='1'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='5'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3' method='merge(Ljava/util/List;)Ljava/util/List;' number='4'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
<block classname='us.bpsm.edn.protocols.C3$InconsistentHierarchy' method='&lt;init&gt;()V' number='0'><tests>
<test name='us.bpsm.edn.protocols.C3Test.testMroExample4OrderDisagreement(us.bpsm.edn.protocols.C3Test)'/>
</tests>
</block>
</coverage>
